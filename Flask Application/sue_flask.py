# -*- coding: utf-8 -*-
"""SUE_Flask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U40ZB7fg0trrFKNz30mx3OGMYhHWlGDQ

# Safe User Experience (phishing url detection using Flask)

## Virtual Environment forrunning flask
"""

!pip install flask-ngrok

"""## Importing necessary modules"""

from flask_ngrok import run_with_ngrok
from flask import Flask, request, jsonify, render_template
import pickle

"""## Mounting drive"""

from google.colab import drive
drive.mount('/content/drive')

"""## loading model"""

model = pickle.load(open('/content/drive/My Drive/SUE/XGBoostClassifier.pkl', 'rb'))

"""## modules for importing colab notebook"""

!pip install import-ipynb
import import_ipynb
import pandas as pd

"""### changing path"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/Colab Notebooks/"

"""### Importing Notebook with model and functions"""

import UrlFeatureExtract

"""# Main application"""

predic = model.predict(pd.DataFrame([UrlFeatureExtract.final("www.google.com")], columns = UrlFeatureExtract.col))
predic.item() == 1

def predict(url):
  url_features = UrlFeatureExtract.final(url)
  model_input = pd.DataFrame([url_features], columns = UrlFeatureExtract.col)
  prediction = model.predict(model_input)
  if prediction.item() == 1:
    return 1
  elif prediction.item() == -1:
    return -1
  else:
    return 0
# print(predict("www.google.com"), file = sys.stdout)
predict("www.google.com")

import sys

app = Flask("Safe_User_Experience", template_folder='/content/drive/My Drive/SUE/templates')
run_with_ngrok(app)


@app.route("/")
def home():
    return render_template("1.html")

@app.route("/predict", methods=['POST', 'GET'])
def predict():
  url = request.form.values()
  url_features = UrlFeatureExtract.final(url)
  model_input = pd.DataFrame([url_features], columns = UrlFeatureExtract.col)
  prediction = model.predict(model_input)
  if prediction.item() == 1:
    return render_template("1.html", pred = 'This is a legitimate Website')
  elif prediction.item() == -1:
    return render_template("1.html", pred = 'This is a Phishing Website')
  else:
    return render_template("1.html", pred = 'This is a suspicious Website')
  

app.run()